{"version":3,"sources":["components/FormComponent.jsx","redux/actions.js","redux/services/httpService.js","redux/services/services.js","components/Home.jsx","components/AddPost.jsx","App.jsx","redux/reducers.js","redux/store.js","index.js"],"names":["FormComponent","dispatch","useDispatch","navigateTo","useNavigate","location","useLocation","Forms","useSelector","state","form","formData","formDataState","setFormDataState","useState","useEffect","pathname","Object","keys","length","React","createElement","className","map","field","key","name","label","required","type","value","onChange","e","handleInputChange","fieldName","target","onClick","preventDefault","filter","alert","payload","instance","axios","create","baseURL","process","mode","headers","Accept","responseBody","response","data","requests","get","url","body","then","post","Servers","getProducts","addProduct","posts","setPosts","AddedPosts","postsData","res","newArray","catch","err","console","log","Fragment","item","title","setResponse","placeholder","App","Router","Routes","Route","path","element","Home","AddPost","combineReducers","arguments","undefined","action","persistConfig","storage","persistedReducer","persistReducer","rootReducer","store","createStore","persistor","persistStore","ReactDOM","createRoot","document","getElementById","render","Provider","PersistGate","loading","StrictMode"],"mappings":"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","file":"static/js/main.6a48d99f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { submitForm } from \"../redux/actions\";\nimport formData from \"../form-data.json\";\nimport { useNavigate, useLocation } from \"react-router\";\n\nconst FormComponent = () => {\n  const dispatch = useDispatch();\n  const navigateTo = useNavigate();\n  const location = useLocation();\n  const Forms = useSelector((state) => state.form.formData);\n\n  const [formDataState, setFormDataState] = useState({});\n\n  const handleInputChange = (e, fieldName) => {\n    setFormDataState({ ...formDataState, [fieldName]: e.target.value });\n  };\n\n  useEffect(() => {\n    if (location.pathname === \"/\" && Object.keys(Forms).length === 0) {\n      return navigateTo(\"/\");\n    } else {\n      return navigateTo(\"/home\");\n    }\n  }, [Forms]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const requiredFields = formData.filter((field) => field.required);\n    const missingFields = requiredFields.filter(\n      (field) => !formDataState[field.name]\n    );\n\n    if (missingFields.length > 0) {\n      alert(\"Please fill all required fields.\");\n    } else {\n      dispatch(submitForm(formDataState));\n      navigateTo(\"/home\");\n    }\n  };\n\n  return (\n    <div className=\"form-div\">\n      {formData.map((field) => (\n        <div className=\"form-main\" key={field.name}>\n          <label className=\"form-label\">\n            {field.label}\n            {field?.required ? \"*\" : \"\"}\n          </label>\n          <input\n            className=\"form-input\"\n            type={field.type}\n            value={formDataState[field.name] || \"\"}\n            onChange={(e) => handleInputChange(e, field.name)}\n          />\n        </div>\n      ))}\n      <button className=\"form-button\" onClick={handleSubmit}>\n        Submit\n      </button>\n    </div>\n  );\n};\n\nexport default FormComponent;\n","export const SUBMIT_FORM = \"SUBMIT_FORM\";\nexport const ADD_POST = \"ADD_POST\";\n\nexport const submitForm = (formData) => ({\n  type: SUBMIT_FORM,\n  payload: formData,\n});\n\nexport const AddPost = (postdata) => ({\n  type: ADD_POST,\n  payload: postdata,\n});\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  mode: \"no-cors\",\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nconst responseBody = (response) => response.data;\n\nconst requests = {\n  get: (url, body, headers) =>\n    instance.get(url, body, headers).then(responseBody),\n  post: (url, body) => instance.post(url, body).then(responseBody),\n};\n\nexport default requests;\n","import requests from \"./httpService\";\n\nconst Servers = {\n  getProducts() {\n    return requests.get(`/posts`);\n  },\n  addProduct(body) {\n    return requests.post(`/posts`, body);\n  },\n};\n\nexport default Servers;\n","import React, { useEffect, useState } from \"react\";\nimport Servers from \"../redux/services/services\";\nimport { useNavigate } from \"react-router\";\nimport { useSelector } from \"react-redux\";\n\nconst FormComponent = () => {\n  const navigateTo = useNavigate();\n  const [posts, setPosts] = useState([]);\n\n  const AddedPosts = useSelector((state) => state.form.postsData);\n\n  useEffect(() => {\n    Servers.getProducts()\n      .then((res) => {\n        if (!AddedPosts) {\n          setPosts(res);\n        } else {\n          let newArray = [AddedPosts, ...res];\n\n          setPosts(newArray);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"button-div\">\n        <button\n          className=\"button-home\"\n          onClick={() => {\n            navigateTo(\"/add-post\");\n          }}\n        >\n          Add Post\n        </button>\n      </div>\n      <p className=\"ml-3\">\n        <span className=\"font-bold\">Note:</span> Listing of the posts:{\" \"}\n      </p>\n      {posts?.length > 0 ? (\n        posts?.map((item) => (\n          <div className=\"Post-section\" key={item.title}>\n            <p>\n              <span className=\"font-bold\"> Title: </span>\n              {item?.title}\n            </p>\n          </div>\n        ))\n      ) : (\n        <div className=\"align-center\">\n          <h2>loading...</h2>\n        </div>\n      )}\n      <div className=\"button-div\">\n        <button\n          className=\"button-home\"\n          onClick={() => {\n            navigateTo(\"/add-post\");\n          }}\n        >\n          Add Post\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default FormComponent;\n","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport Servers from \"../redux/services/services\";\nimport { AddPost } from \"../redux/actions\";\nimport { useDispatch } from \"react-redux\";\n\nconst FormComponent = () => {\n  const navigateTo = useNavigate();\n  const dispatch = useDispatch();\n\n  const [formDataState, setFormDataState] = useState({});\n  const [response, setResponse] = useState(null);\n\n  const handleInputChange = (e, fieldName) => {\n    setFormDataState({ ...formDataState, [fieldName]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (Object.keys(formDataState).length === 0 || formDataState.title === \"\") {\n      alert(\"Please fill all required fields.\");\n    } else {\n      const payload = {\n        title: formDataState.title,\n      };\n      Servers.addProduct(payload)\n        .then((res) => {\n          setResponse(res);\n          dispatch(AddPost(res));\n          alert(\"Post created successfully.\");\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  return (\n    <div className=\"form-div\">\n      <div className=\"form-main\">\n        <label className=\"form-label\">{\"Post Title *\"}</label>\n        <input\n          className=\"form-input\"\n          type={\"text\"}\n          placeholder=\"post title\"\n          value={formDataState[\"title\"] || \"\"}\n          onChange={(e) => handleInputChange(e, \"title\")}\n        />\n      </div>\n      <button className=\"form-button\" onClick={handleSubmit}>\n        Submit\n      </button>\n      {response && (\n        <div>\n          <p>\n            <span> Response: </span>\n            {response?.title}\n          </p>\n        </div>\n      )}\n\n      {response && (\n        <button className=\"form-button\" onClick={() => navigateTo(\"/home\")}>\n          Back to Listing\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default FormComponent;\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport FormComponent from \"./components/FormComponent\";\nimport Home from \"./components/Home\";\nimport AddPost from \"./components/AddPost\";\n\nconst App = () => {\n  return (\n    <>\n      <Router>\n        <Routes>\n          <Route path=\"/home\" element={<Home />} />\n          <Route path=\"/add-post\" element={<AddPost />} />\n          <Route path=\"/\" element={<FormComponent />} />\n        </Routes>\n      </Router>\n    </>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { SUBMIT_FORM, ADD_POST } from \"./actions\";\n\nconst formReducer = (state = { formData: {} }, action) => {\n  switch (action.type) {\n    case SUBMIT_FORM:\n      return { ...state, formData: action.payload };\n    case ADD_POST:\n      return { ...state, postsData: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  form: formReducer,\n});\n","import { createStore } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // Default: localStorage for web\nimport rootReducer from \"./reducers\";\n\nconst persistConfig = {\n  key: \"root\", // Unique key for your persisted state\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = createStore(persistedReducer);\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App.jsx\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./redux/store.js\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </PersistGate>\n  </Provider>\n);\n"],"sourceRoot":""}